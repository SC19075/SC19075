K = dim(g)[1]
histJ = c()
pasfini = 1
Jold = Inf
D = matrix(0, n, K)
for (j in 1:K) {
D[, j] = rowSums(sweep(x, 2, g[j, ], "-")^2)
}
iter = 1
J_old = Inf
while (pasfini) {
s = (1/(D + eps))^(1/(mybeta - 1))
u = s/(s %*% matrix(1, K, K))
t1 = t(u^mybeta) %*% x
t2 = t(u^mybeta) %*% matrix(1, n, d)
V = t1/t2
g = V
D = matrix(0, n, K)
for (j in 1:K) {
D[, j] = rowSums(sweep(x, 2, g[j, ], "-")^2)
}
J = sum(u^mybeta * D)
pasfini = abs(J - Jold) > 0.001 && (iter < iter_max)
Jold = J
histJ = c(histJ, J)
iter = iter + 1
}
cluster_id = apply(u, 1, which.max)
re = list(u, J, histJ, g, cluster_id)
names(re) = c("u", "J", "histJ", "g", "cluster_id")
return(re)
}
x = as.matrix(x)
seeds = 1:nrow(x)
id = sample(seeds, K)
g = as.matrix(x[id, ])
re_best = FCM_onetime(x = x, init_centers = g, mybeta = mybeta, iter_max = iter_max, eps = eps)
if (nstart > 1) {
minJ = 0
i = 2
while (i <= nstart) {
init_centers_id = sample(seeds, K)
init_centers = as.matrix(x[init_centers_id, ])
run = FCM_onetime(x, init_centers = init_centers, mybeta = mybeta, iter_max = iter_max)
if (run$J <= re_best$J) {
re_best = run
}
i = i + 1
}
}
return(re_best)
}
#' @examples
\dontrun{
x=data.frame(v1=c(85 ,99 ,89 ,89 ,99),v2=c(97 ,90 ,93 ,97 ,90),v3=c( 85 ,91 ,87 ,91 ,93))
result <- FCM(x,2)
result
}
#' 'g': The cluster center of the K-d matrix
#' 'J':The membership function
#' 'histJ':All memberships in the iter process}\code{n}
#' @examples
#' \dontrun{
#' x=data.frame(v1=c(85 ,99 ,89 ,89 ,99),v2=c(97 ,90 ,93 ,97 ,90),v3=c( 85 ,91 ,87 ,91 ,93))
#' result <- FCM(x,2)
#' result
#' }
#' @export
FCM <- function(x, K, mybeta = 2, nstart = 1, iter_max = 100, eps = 1e-06) {
FCM_onetime <- function(x, init_centers, mybeta = 2, iter_max = 100, eps = 1e-06) {
n = dim(x)[1]
d = dim(x)[2]
g = init_centers
K = dim(g)[1]
histJ = c()
pasfini = 1
Jold = Inf
D = matrix(0, n, K)
for (j in 1:K) {
D[, j] = rowSums(sweep(x, 2, g[j, ], "-")^2)
}
iter = 1
J_old = Inf
while (pasfini) {
s = (1/(D + eps))^(1/(mybeta - 1))
u = s/(s %*% matrix(1, K, K))
t1 = t(u^mybeta) %*% x
t2 = t(u^mybeta) %*% matrix(1, n, d)
V = t1/t2
g = V
D = matrix(0, n, K)
for (j in 1:K) {
D[, j] = rowSums(sweep(x, 2, g[j, ], "-")^2)
}
J = sum(u^mybeta * D)
pasfini = abs(J - Jold) > 0.001 && (iter < iter_max)
Jold = J
histJ = c(histJ, J)
iter = iter + 1
}
cluster_id = apply(u, 1, which.max)
re = list(u, J, histJ, g, cluster_id)
names(re) = c("u", "J", "histJ", "g", "cluster_id")
return(re)
}
x = as.matrix(x)
seeds = 1:nrow(x)
id = sample(seeds, K)
g = as.matrix(x[id, ])
re_best = FCM_onetime(x = x, init_centers = g, mybeta = mybeta, iter_max = iter_max, eps = eps)
if (nstart > 1) {
minJ = 0
i = 2
while (i <= nstart) {
init_centers_id = sample(seeds, K)
init_centers = as.matrix(x[init_centers_id, ])
run = FCM_onetime(x, init_centers = init_centers, mybeta = mybeta, iter_max = iter_max)
if (run$J <= re_best$J) {
re_best = run
}
i = i + 1
}
}
return(re_best)
}
if(length(x)==length(y) & length(x)==length(z)){
if(is.numeric(x)){
if(identical(y^2,y)){
if(length(table(z))==2){
return(0)
}else{
return(1)
}
}else{
return(1)
}
}else{
return(1)
}
}else{
return(1)
}
#' @title A function to test parameter in function surlogrank
#' @description Whether the parameter lengths are equal,time variable input is of numeric type,status variable with only 0,1,group only two elements
#' @param x time variable
#' @param y status variable
#' @param z group variable
#' @return 1 or 0
#' @export
paraerr <- function(x,y,z){
if(length(x)==length(y) & length(x)==length(z)){
if(is.numeric(x)){
if(identical(y^2,y)){
if(length(table(z))==2){
return(0)
}else{
return(1)
}
}else{
return(1)
}
}else{
return(1)
}
}else{
return(1)
}
}
#' @title  function(s) that perform the log-rank test using the large-sample approximation
#' @description use four statistics:Mantel-Haenszel Logrank Test;Cox-Mantel Logrank Test;Generalized Wilcoxon;Tarone and Ware
#' @param time time variable,a numeric vector
#' @param status status variable,only conclude 0 and 1 ,suggest live or dead
#' @param group group variable,only divided to 2 groups of patients with acute myelogenous leukaemia
#' @return an object that contains the test statistic, the p-value, and the method
#' @export
permut=function(time,status,group){
testgroup=data.frame(time,status,group)
label=names(table(testgroup$group))
testgroup2=testgroup[testgroup$group==label[2],]
testgroup1=testgroup[testgroup$group==label[1],]
J2=length(table(testgroup2$time))
testgoup_status1=testgroup[testgroup$status==1,]
time=as.numeric(names(table(testgoup_status1$time)))
J=length(time)
O=vector(mode="numeric",length=J)
O2=vector(mode="numeric",length=J2)
time_group2=as.numeric(names(table(testgroup2$time)))
for(i in 1:J2){
O2[i]=sum(testgroup2[testgroup2$time==time_group2[i],]$status)
}
for(i in 1:J2){
O[which(time==time_group2[i])]=O2[i]
}
d=vector(length=J)
for(i in 1:J){
d[i]=sum(testgroup[testgroup$time==time[i],]$status)
}
population_2=nrow(testgroup2)
Y2=vector(length=J)
Y2[1]=population_2
for(i in 2:J){
Y2[i]=population_2-nrow(testgroup2[testgroup2$time<time[i],])
}
population=nrow(testgroup)
Y=vector(length=J)
for(i in 1:J){
Y[i]=population-nrow(testgroup[testgroup$time<time[i],])
}
Y1=vector(length=J)
Y1=Y-Y2
E=vector(length=J)
for(j in 1:J){
E[j]=d[j]*Y2[j]/Y[j]
}
V=vector(length=J)
for(j in 1:J)
V[j]=(Y1[j]*Y2[j]*d[j]*(Y[j]-d[j]))/((Y[j])^2*(Y[j]-1))
Z=sum(O-E)/sqrt(sum(V))
Z1=Z^2
E1=vector(length=J)
for(j in 1:J){
E1[j]=d[j]*Y1[j]/Y[j]
}
d2=O
d1=d-d2
E2=vector(length=J)
for(j in 1:J){
E2[j]=d[j]*Y2[j]/Y[j]
}
Z2=(sum(d1-E1))^2/(sum(E1))+(sum(d2-E2))^2/(sum(E2))
Z3=(t(Y) %*%(O-E))^2/((t(Y)^2)%*%V)
Z4=(t(sqrt(Y)) %*%(O-E))^2/(t(Y)%*%V)
return(list(Z1, Z2, as.numeric(Z3),as.numeric(Z4)))
}
}
#' @title A function to  Create an S3 class for the object your function returns and  S3 print method
#' @description S3 method output: the name of the test (log-rank), the method used, the test statistic, and the p-value.
#' @param x the result from function surlogrank
#' @return text
#' @export
logrankmethod <- function(x) UseMethod("logrankmethod")
logrankmethod.default <- function(x) "Unknown class"
logrankmethod.logrank <- function(x){
xx=as.numeric(as.character(x[1:12]))
if(as.logical(x[13])){
cat("     permutation TEST\n")
cat("\n")
cat("Mantel-Haenszel logrank\n")
cat("——————————————————————————————————\n")
cat("Test Statistic:")
cat(" ",xx[1],"\n")
cat("       p value:")
cat(" ",xx[9],"\n")
cat("\n")
cat("Cox-Mantel Logrank\n")
cat("——————————————————————————————————\n")
cat("Test Statistic:")
cat(" ",xx[3],"\n")
cat("       p value:")
cat(" ",xx[10],"\n")
cat("\n")
cat("Generalized Wilcoxon\n")
cat("——————————————————————————————————\n")
cat("Test Statistic:")
cat(" ",xx[5],"\n")
cat("       p value:")
cat(" ",xx[11],"\n")
cat("\n")
cat("Tarone and Ware\n")
cat("——————————————————————————————————\n")
cat("Test Statistic:")
cat(" ",xx[7],"\n")
cat("       p value:")
cat(" ",xx[12],"\n")
}else{
cat("     LOGRANK TEST\n")
cat("\n")
cat("Mantel-Haenszel logrank\n")
cat("——————————————————————————————————\n")
cat("Test Statistic:")
cat(" ",xx[1],"\n")
cat("       p value:")
cat(" ",xx[2],"\n")
cat("\n")
cat("Cox-Mantel Logrank\n")
cat("——————————————————————————————————\n")
cat("Test Statistic:")
cat(" ",xx[3],"\n")
cat("       p value:")
cat(" ",xx[4],"\n")
cat("\n")
cat("Generalized Wilcoxon\n")
cat("——————————————————————————————————\n")
cat("Test Statistic:")
cat(" ",xx[5],"\n")
cat("       p value:")
cat(" ",xx[6],"\n")
cat("\n")
cat("Tarone and Ware\n")
cat("——————————————————————————————————\n")
cat("Test Statistic:")
cat(" ",xx[7],"\n")
cat("       p value:")
cat(" ",xx[8],"\n")
}
}
#' @title  function that perform the log-rank test using the large-sample approximation and the permutation test
#' @description use four statistics:Mantel-Haenszel Logrank Test;Cox-Mantel Logrank Test;Generalized Wilcoxon;Tarone and Ware
#' @param time time variable,a numeric vector
#' @param status status variable,only conclude 0 and 1 ,1：fail or 0：at risk
#' @param group group variable,only divided to 2 groups of patients with acute myelogenous leukaemia
#' @param permutation TRUE or FLASE ,use permutation or not
#' @return an object that contains the test statistic, the p-value, and the method
#' @export
surlogrank <- function(time,status,group,permutation){
err=paraerr(time, status, group)
if(err==1){
return("wrong input")
}
testgroup=data.frame(time,status,group)
label=names(table(testgroup$group))
testgroup2=testgroup[testgroup$group==label[2],]
testgroup1=testgroup[testgroup$group==label[1],]
J2=length(table(testgroup2$time))
testgoup_status1=testgroup[testgroup$status==1,]
time=as.numeric(names(table(testgoup_status1$time)))
J=length(time)
O=vector(mode="numeric",length=J)
O2=vector(mode="numeric",length=J2)
time_group2=as.numeric(names(table(testgroup2$time)))
for(i in 1:J2){
O2[i]=sum(testgroup2[testgroup2$time==time_group2[i],]$status)
}
for(i in 1:J2){
O[which(time==time_group2[i])]=O2[i]
}
d=vector(length=J)
for(i in 1:J){
d[i]=sum(testgroup[testgroup$time==time[i],]$status)
}
population_2=nrow(testgroup2)
Y2=vector(length=J)
Y2[1]=population_2
for(i in 2:J){
Y2[i]=population_2-nrow(testgroup2[testgroup2$time<time[i],])
}
population=nrow(testgroup)
Y=vector(length=J)
for(i in 1:J){
Y[i]=population-nrow(testgroup[testgroup$time<time[i],])
}
Y1=vector(length=J)
Y1=Y-Y2
E=vector(length=J)
for(j in 1:J){
E[j]=d[j]*Y2[j]/Y[j]
}
V=vector(length=J)
for(j in 1:J)
V[j]=(Y1[j]*Y2[j]*d[j]*(Y[j]-d[j]))/((Y[j])^2*(Y[j]-1))
Z=sum(O-E)/sqrt(sum(V))
Z1=Z^2
p_value1=1-pchisq(q=Z1,df=1)
E1=vector(length=J)
for(j in 1:J){
E1[j]=d[j]*Y1[j]/Y[j]
}
d2=O
d1=d-d2
E2=vector(length=J)
for(j in 1:J){
E2[j]=d[j]*Y2[j]/Y[j]
}
Z2=(sum(d1-E1))^2/(sum(E1))+(sum(d2-E2))^2/(sum(E2))
p_value2=1-pchisq(q=Z2,df=1)
Z3=(t(Y) %*%(O-E))^2/((t(Y)^2)%*%V)
p_value3=1-pchisq(q=Z3,df=1)
Z4=(t(sqrt(Y)) %*%(O-E))^2/(t(Y)%*%V)
p_value4=1-pchisq(q=Z4,df=1)
n1=nrow(testgroup1)
n2=nrow(testgroup2)
S_obs=mean(testgroup2$status)-mean(testgroup1$status)
S_obs=abs(S_obs)
nsims=1000
sim_re=matrix(0,nrow=nsims,ncol=4)
for(i in 1:nsims){
tmp=sample(c(rep(1,n1),rep(2,n2)))
sim_re[i,]=as.numeric(permut(testgroup$time, testgroup$status, tmp))
}
p_value5=mean(Z1<abs(sim_re[,1]))
p_value6=mean(Z2<abs(sim_re[,2]))
p_value7=mean(as.numeric(Z3)<abs(sim_re[,3]))
p_value8=mean(as.numeric(Z4)<abs(sim_re[,4]))
logrankoutput=structure(list(Z1,p_value1,Z2,p_value2,Z3,p_value3,Z4,p_value4,p_value5,p_value6,p_value7,p_value8,permutation),class="logrank")
return(logrankoutput)
}
devtools::document
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(roxygen2)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?pchisq
devtools::document()
#' @title  function that perform the log-rank test using the large-sample approximation and the permutation test
#' @description use four statistics:Mantel-Haenszel Logrank Test;Cox-Mantel Logrank Test;Generalized Wilcoxon;Tarone and Ware
#' @param time time variable,a numeric vector
#' @param status status variable,only conclude 0 and 1 ,1：fail or 0：at risk
#' @param group group variable,only divided to 2 groups of patients with acute myelogenous leukaemia
#' @param permutation TRUE or FLASE ,use permutation or not
#' @return an object that contains the test statistic, the p-value, and the method
#' @importFrom ("stats", "pchisq")
#' @export
surlogrank <- function(time,status,group,permutation){
err=paraerr(time, status, group)
if(err==1){
return("wrong input")
}
testgroup=data.frame(time,status,group)
label=names(table(testgroup$group))
testgroup2=testgroup[testgroup$group==label[2],]
testgroup1=testgroup[testgroup$group==label[1],]
J2=length(table(testgroup2$time))
testgoup_status1=testgroup[testgroup$status==1,]
time=as.numeric(names(table(testgoup_status1$time)))
J=length(time)
O=vector(mode="numeric",length=J)
O2=vector(mode="numeric",length=J2)
time_group2=as.numeric(names(table(testgroup2$time)))
for(i in 1:J2){
O2[i]=sum(testgroup2[testgroup2$time==time_group2[i],]$status)
}
for(i in 1:J2){
O[which(time==time_group2[i])]=O2[i]
}
d=vector(length=J)
for(i in 1:J){
d[i]=sum(testgroup[testgroup$time==time[i],]$status)
}
population_2=nrow(testgroup2)
Y2=vector(length=J)
Y2[1]=population_2
for(i in 2:J){
Y2[i]=population_2-nrow(testgroup2[testgroup2$time<time[i],])
}
population=nrow(testgroup)
Y=vector(length=J)
for(i in 1:J){
Y[i]=population-nrow(testgroup[testgroup$time<time[i],])
}
Y1=vector(length=J)
Y1=Y-Y2
E=vector(length=J)
for(j in 1:J){
E[j]=d[j]*Y2[j]/Y[j]
}
V=vector(length=J)
for(j in 1:J)
V[j]=(Y1[j]*Y2[j]*d[j]*(Y[j]-d[j]))/((Y[j])^2*(Y[j]-1))
Z=sum(O-E)/sqrt(sum(V))
Z1=Z^2
p_value1=1-pchisq(q=Z1,df=1)
E1=vector(length=J)
for(j in 1:J){
E1[j]=d[j]*Y1[j]/Y[j]
}
d2=O
d1=d-d2
E2=vector(length=J)
for(j in 1:J){
E2[j]=d[j]*Y2[j]/Y[j]
}
Z2=(sum(d1-E1))^2/(sum(E1))+(sum(d2-E2))^2/(sum(E2))
p_value2=1-pchisq(q=Z2,df=1)
Z3=(t(Y) %*%(O-E))^2/((t(Y)^2)%*%V)
p_value3=1-pchisq(q=Z3,df=1)
Z4=(t(sqrt(Y)) %*%(O-E))^2/(t(Y)%*%V)
p_value4=1-pchisq(q=Z4,df=1)
n1=nrow(testgroup1)
n2=nrow(testgroup2)
S_obs=mean(testgroup2$status)-mean(testgroup1$status)
S_obs=abs(S_obs)
nsims=1000
sim_re=matrix(0,nrow=nsims,ncol=4)
for(i in 1:nsims){
tmp=sample(c(rep(1,n1),rep(2,n2)))
sim_re[i,]=as.numeric(permut(testgroup$time, testgroup$status, tmp))
}
p_value5=mean(Z1<abs(sim_re[,1]))
p_value6=mean(Z2<abs(sim_re[,2]))
p_value7=mean(as.numeric(Z3)<abs(sim_re[,3]))
p_value8=mean(as.numeric(Z4)<abs(sim_re[,4]))
logrankoutput=structure(list(Z1,p_value1,Z2,p_value2,Z3,p_value3,Z4,p_value4,p_value5,p_value6,p_value7,p_value8,permutation),class="logrank")
return(logrankoutput)
}
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
